<?php

namespace App\Libraries;

use Dotenv\Dotenv;
use \PDO as PDO;

class Database
{
    private $dotenv;
    private $config;
    private $connection;
    private static $instance;

    /**
     * Get a copy of the database connection
     *
     * @param array $config
     *
     * @return Database
     */
    public static function getInstance()
    {
        if (!self::$instance) {
            self::$instance = new self(self::$config);
        }
        return self::$instance;
    }

    public function __construct()
    {
        $this->dotenv = new Dotenv(dirname(dirname(__DIR__)));
        $this->dotenv->load();
        $this->config = [
            'driver'   => env('DB_DRIVER'),
            'host'     => env('DB_HOST'),
            'port'     => env('DB_PORT'),
            'dbname'   => env('DB_DATABASE'),
            'username' => env('DB_USERNAME'),
            'password' => env('DB_PASSWORD'),
        ];
        $this->initialisePDOConnection();
    }

    public function __destruct()
    {
        $this->connection = null;
    }

    private function initialisePDOConnection()
    {
        if ($this->connection === null):
            $dsn = "" .
            $this->config['driver'] .
            ":host=" . $this->config['host'] .
            ";port=" . $this->config['port'] .
            ";dbname=" . $this->config['dbname'];
        endif;

        try {
            $this->connection = new PDO($dsn, $this->config['username'], $this->config['password']);
            $options          = [
                PDO::ATTR_PERSISTENT         => true,
                PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ,
                PDO::ATTR_EMULATE_PREPARES   => false,
            ];
            // $this->connection->setAttributes($options);
            $this->connection->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
            $this->connection->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
        } catch (PDOException $e) {
            echo __LINE__ . $e->getMessage();
        }

    }

    private function __clone()
    {}

    public function getConnection()
    {
        return $this->connection;
    }

    // Get a single record from the database
    public function getSingleRecord($sql, array $params = null)
    {
        if ($params != null):
            $stmt = $this->connection->prepare($sql);
            $stmt->execute($params);
        else:
            $stmt = $this->connection->query($sql);
        endif;
        if (!$stmt->rowCount()):
            return "No Record Found!";
        else:
            return $stmt->fetch();
        endif;
    }

    // Get all records from the database
    public function getAllRecords($sql, array $params = null)
    {
        if ($params != null):
            $stmt = $this->connection->prepare($sql);
            $stmt->execute($params);
        else:
            $stmt = $this->connection->query($sql);
        endif;
        if (!$stmt->rowCount()):
            return "No Records Found!";
        else:
            return $stmt->fetchAll();
        endif;
    }

    // Insert records into the database
    public function insertRecord($sql, array $params)
    {
        $stmt = $this->connection->$prepare($sql);
        $stmt->execute($params);
        return "Record Added!";
    }

    // Update records in the database
    public function updateRecord($sql, array $params)
    {
        $stmt = $this->connection->$prepare($sql);
        $stmt->execute($params);
        return "Record Updated!";
    }

    // Delete records from the database
    public function deleteRecord($sql, array $params)
    {
        $stmt = $this->connection->$prepare($sql);
        $stmt->execute($params);
        return "Record Deleted!";
    }
}
